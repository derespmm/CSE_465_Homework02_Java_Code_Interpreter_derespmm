import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;

public class Parser {
    private int position;
    private int lineNumber;
    private HashMap<String, Object> vars = new HashMap<>();

    public Parser() {
        this.position = 0; 
        this.lineNumber = 1;
    }

    public void parse(List<String> tokens) {
        while (position < tokens.size()) {
            String token = tokens.get(position);

            if (token.equals("FOR")) {
                parseFor(tokens.get(position + 1), tokens);
            } else if (token.equals("PRINT")) {
                parsePrint(tokens.get(position + 1));
                position += 2;
            } else if (token.matches("[A-Z]")) {
                parseAssign(token, tokens.get(position + 1), tokens.get(position + 2));
                position += 3;
            } else {
                System.out.println("Invalid token: " + token);
            }
            position++;
            lineNumber++;
            
        }
    }

    private void parsePrint(String var) {
        if (vars.containsKey(var)) {
            System.out.println(var + "=" + vars.get(var));
        }
    }

    private void parseAssign(String var, String op, String val) {
        switch (op) {
            case "=":
                varEquals(var, val);
                break;
            case "+=":
                varPlusEquals(var, val);
                break;
            case "-=":
                varMinusEquals(var, val);
                break;
            case "/=":
                varDivEquals(var, val);
                break;
            case "*=":
                varMulEquals(var, val);
                break;
        }
    }

    private void parseFor(String reps, List<String> tokens) {
        position += 2;
        List<String> loopTokens = new LinkedList<>();
        while (position < tokens.size() && !tokens.get(position).equals("ENDFOR")) {
            loopTokens.add(tokens.get(position));
            position++;
        }
        for (int i = 0; i < Integer.parseInt(reps); i++) {
            int loopPos = 0;
            while (loopPos < loopTokens.size()) {
                if (loopTokens.get(loopPos).matches("[\\+\\*-]=")) { // regex generated by ai
                    parseAssign(loopTokens.get(loopPos - 1), loopTokens.get(loopPos), loopTokens.get(loopPos + 1));
                }
                loopPos++;
            }
        }
    }

    private void varEquals(String var, String val) {
        if (val.matches("-?\\d+")) {  // regex generated by ai
            vars.put(var, Integer.parseInt(val));
        } else if (vars.containsKey(val)) {  
            vars.put(var, vars.get(val));
        } else {
            vars.put(var, val);
        }
    }

    private void varPlusEquals(String var, String val) {
        Object varVal = vars.get(var);
        if (varVal instanceof Integer && val.matches("-?\\d+")) {
            vars.put(var, (Integer) varVal + Integer.parseInt(val));
        } else if (varVal instanceof Integer && vars.containsKey(val) && vars.get(val) instanceof Integer) {
            vars.put(var, (Integer) varVal + (Integer) vars.get(val));
        } else if (varVal instanceof String && val.matches("-?\\d+")) {
            System.out.println("RUNTIME ERROR: line " + lineNumber);
            System.exit(1);
        } else if (varVal instanceof String && val instanceof String && !vars.containsKey(val)) {
            vars.put(var, (String) varVal + (String) val);
        } else if (varVal instanceof String && vars.get(val) instanceof String && vars.containsKey(val)) {
            vars.put(var, (String) varVal + (String) vars.get(val));
        } else {
            System.out.println("RUNTIME ERROR: line " + lineNumber);
            System.exit(1);
        }
    }

    private void varMinusEquals(String var, String val) {
        Object varVal = vars.get(var);
        if (varVal instanceof Integer && val.matches("-?\\d+")) {
            vars.put(var, (Integer) varVal - Integer.parseInt(val));
        } else if (varVal instanceof Integer && vars.containsKey(val) && vars.get(val) instanceof Integer) {
            vars.put(var, (Integer) varVal - (Integer) vars.get(val));
        } else {
            System.out.println("RUNTIME ERROR: line " + lineNumber);
            System.exit(1);
        }
    }

    private void varDivEquals(String var, String val) {
        Object varVal = vars.get(var);
        if (varVal instanceof Integer && val.matches("-?\\d+")) {
            vars.put(var, (Integer) varVal / Integer.parseInt(val));
        } else if (varVal instanceof Integer && vars.containsKey(val) && vars.get(val) instanceof Integer) {
            vars.put(var, (Integer) varVal / (Integer) vars.get(val));
        } else {
            System.out.println("RUNTIME ERROR: line " + lineNumber);
            System.exit(1);
        }
    }

    private void varMulEquals(String var, String val) {
        Object varVal = vars.get(var);
        if (varVal instanceof Integer && val.matches("-?\\d+")) {
            vars.put(var, (Integer) varVal * Integer.parseInt(val));
        } else if (varVal instanceof Integer && vars.containsKey(val) && vars.get(val) instanceof Integer) {
            vars.put(var, (Integer) varVal * (Integer) vars.get(val));
        } else {
            System.out.println("RUNTIME ERROR: line " + lineNumber);
            System.exit(1);
        }
    }

}





